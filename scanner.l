%{
#include <string.h>
#include "getterms.h"
#include "y.tab.h"	/* Tokens definitions generated by yacc (option -d)*/

extern int yyerror(char *);
%}
%option noyywrap
%array

DIGIT    [0-9]
PID      [a-z][a-zA-Z0-9_]*"'"
ID       [a-z][a-zA-Z0-9_]*
VID      [A-Z][a-zA-Z0-9_]*
STRING   "\""[^\"]*"\""

%%

abs		{ return ABS; }
in		{ return IN; }
not		{ return NOT; }
or		{ return OR; }
"#function" {return FUNCTION;}

":-"		{ return IF; }
".."		{ return DOTS; }
":="		{ return ASSIGN; }
"\\E"		{ return EXISTS; }
"#show"         { return SHOW; }
"\\forsome"		{ return FORSOME; }

">="		{ return GEQ; }	
"<="		{ return LEQ; }	
"!="		{ return NEQ; }	

{DIGIT}+	{ yylval.strval=strCopy(yytext); return NUMBER; }
{ID}		{ yylval.strval=strCopy(yytext); return ID; }
{VID}		{ yylval.strval=strCopy(yytext); return VID; }
{STRING}	{ int len=strlen(yytext)-2;
                  yylval.strval = (char *) malloc(len+1);
		  yylval.strval[len]='\0';
		  if (len)		  		  
  		    strncpy(yylval.strval,yytext+1,len);
		  return STRING;}

"/*"([^*]|"*"[^/])*"*/"	{
		 char *s;
		 for (s=yytext;(s=strchr(s,'\n'))!=NULL; s++,yyline++);
		}
"%"[^\n]*	{} /* eat up one-line comments */

[ \t\r]+	/* eat up whitespace */
\n		{yyline++;}
.           	{return yytext[0];}

%%
